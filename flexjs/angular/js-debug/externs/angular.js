/**
 * @fileoverview Externs generated by dts2as from NextGenActionScript.com
 * @externs
 * @suppress {duplicate}
 */

/**
 * @type {Object}
 */
angular.auto = {};

/**
 * @type {angular.IAngularStatic}
 */
var angular;

/**
 * @interface
 */
angular.IServiceProvider = function() {};
/**
 * @type {Object}
 */
angular.IServiceProvider.prototype.$get;

/**
 * @interface
 */
angular.IAngularBootstrapConfig = function() {};
/**
 * @type {boolean}
 */
angular.IAngularBootstrapConfig.prototype.strictDi;

/**
 * @type {boolean}
 */
angular.IAngularBootstrapConfig.prototype.debugInfoEnabled;

/**
 * @interface
 */
angular.IAngularStatic = function() {};
/**
 * @type {Function}
 */
angular.IAngularStatic.prototype.element;

/**
 * @type {Object}
 */
angular.IAngularStatic.prototype.version;

/**
 * @param {Object} context
 * @param {Function} fn
 * @param {...Object} args
 * @return {Function}
 */
angular.IAngularStatic.prototype.bind = function(context, fn, args) {};

/**
 * @param {Object} element
 * @param {Array=} modules
 * @param {Object=} config
 * @return {angular.auto.IInjectorService}
 */
angular.IAngularStatic.prototype.bootstrap = function(element, modules, config) {};

/**
 * @param {Object} source
 * @param {Object=} destination
 * @return {Object}
 */
angular.IAngularStatic.prototype.copy = function(source, destination) {};

/**
 * @param {Object} value1
 * @param {Object} value2
 * @return {boolean}
 */
angular.IAngularStatic.prototype.equals = function(value1, value2) {};

/**
 * @param {Object} destination
 * @param {...Object} sources
 * @return {Object}
 */
angular.IAngularStatic.prototype.extend = function(destination, sources) {};

/**
 * @param {Object} obj
 * @param {Function} iterator
 * @param {Object=} context
 * @return {Object}
 */
angular.IAngularStatic.prototype.forEach = function(obj, iterator, context) {};

/**
 * @param {string} json
 * @return {Object}
 */
angular.IAngularStatic.prototype.fromJson = function(json) {};

/**
 * @param {Object=} arg
 * @return {Object}
 */
angular.IAngularStatic.prototype.identity = function(arg) {};

/**
 * @param {Array=} modules
 * @param {boolean=} strictDi
 * @return {angular.auto.IInjectorService}
 */
angular.IAngularStatic.prototype.injector = function(modules, strictDi) {};

/**
 * @param {Object} value
 * @return {boolean}
 */
angular.IAngularStatic.prototype.isArray = function(value) {};

/**
 * @param {Object} value
 * @return {boolean}
 */
angular.IAngularStatic.prototype.isDate = function(value) {};

/**
 * @param {Object} value
 * @return {boolean}
 */
angular.IAngularStatic.prototype.isDefined = function(value) {};

/**
 * @param {Object} value
 * @return {boolean}
 */
angular.IAngularStatic.prototype.isElement = function(value) {};

/**
 * @param {Object} value
 * @return {boolean}
 */
angular.IAngularStatic.prototype.isFunction = function(value) {};

/**
 * @param {Object} value
 * @return {boolean}
 */
angular.IAngularStatic.prototype.isNumber = function(value) {};

/**
 * @param {Object} value
 * @return {boolean}
 */
angular.IAngularStatic.prototype.isObject = function(value) {};

/**
 * @param {Object} value
 * @return {boolean}
 */
angular.IAngularStatic.prototype.isString = function(value) {};

/**
 * @param {Object} value
 * @return {boolean}
 */
angular.IAngularStatic.prototype.isUndefined = function(value) {};

/**
 * @param {string} str
 * @return {string}
 */
angular.IAngularStatic.prototype.lowercase = function(str) {};

/**
 * @param {Object} dst
 * @param {...Object} src
 * @return {Object}
 */
angular.IAngularStatic.prototype.merge = function(dst, src) {};

/**
 * @param {string} name
 * @param {Array=} requires
 * @param {Function=} configFn
 * @return {angular.IModule}
 */
angular.IAngularStatic.prototype.module = function(name, requires, configFn) {};

/**
 * @param {...Object} args
 */
angular.IAngularStatic.prototype.noop = function(args) {};

/**
 */
angular.IAngularStatic.prototype.reloadWithDebugInfo = function() {};

/**
 * @param {Object} obj
 * @param {boolean=} pretty
 * @return {string}
 */
angular.IAngularStatic.prototype.toJson = function(obj, pretty) {};

/**
 * @param {string} str
 * @return {string}
 */
angular.IAngularStatic.prototype.uppercase = function(str) {};

/**
 * @param {Array=} extraModules
 * @return {angular.auto.IInjectorService}
 */
angular.IAngularStatic.prototype.resumeBootstrap = function(extraModules) {};

/**
 * @interface
 */
angular.IModule = function() {};
/**
 * @type {string}
 */
angular.IModule.prototype.name;

/**
 * @type {Array}
 */
angular.IModule.prototype.requires;

/**
 * @param {string} name
 * @param {Object} options
 * @return {angular.IModule}
 */
angular.IModule.prototype.component = function(name, options) {};

/**
 * @param {Object} configFn
 * @return {angular.IModule}
 */
angular.IModule.prototype.config = function(configFn) {};

/**
 * @param {Object} name
 * @param {Object} value
 * @return {angular.IModule}
 */
angular.IModule.prototype.constant = function(name, value) {};

/**
 * @param {Object} name
 * @param {Object} controllerConstructor
 * @return {angular.IModule}
 */
angular.IModule.prototype.controller = function(name, controllerConstructor) {};

/**
 * @param {Object} name
 * @param {Object} directiveFactory
 * @return {angular.IModule}
 */
angular.IModule.prototype.directive = function(name, directiveFactory) {};

/**
 * @param {Object} name
 * @param {Object} $getFn
 * @return {angular.IModule}
 */
angular.IModule.prototype.factory = function(name, $getFn) {};

/**
 * @param {Object} name
 * @param {Object} filterFactoryFunction
 * @return {angular.IModule}
 */
angular.IModule.prototype.filter = function(name, filterFactoryFunction) {};

/**
 * @param {Object} name
 * @param {Object} serviceProviderFactory
 * @return {angular.IModule}
 */
angular.IModule.prototype.provider = function(name, serviceProviderFactory) {};

/**
 * @param {Object} initializationFunction
 * @return {angular.IModule}
 */
angular.IModule.prototype.run = function(initializationFunction) {};

/**
 * @param {Object} name
 * @param {Object} serviceConstructor
 * @return {angular.IModule}
 */
angular.IModule.prototype.service = function(name, serviceConstructor) {};

/**
 * @param {Object} name
 * @param {Object} value
 * @return {angular.IModule}
 */
angular.IModule.prototype.value = function(name, value) {};

/**
 * @param {string} name
 * @param {Object} decoratorConstructor
 * @return {angular.IModule}
 */
angular.IModule.prototype.decorator = function(name, decoratorConstructor) {};

/**
 * @interface
 */
angular.IAttributes = function() {};
/**
 * @type {Object}
 */
angular.IAttributes.prototype.$attr;

/**
 * @param {string} name
 * @return {string}
 */
angular.IAttributes.prototype.$normalize = function(name) {};

/**
 * @param {string} classVal
 */
angular.IAttributes.prototype.$addClass = function(classVal) {};

/**
 * @param {string} classVal
 */
angular.IAttributes.prototype.$removeClass = function(classVal) {};

/**
 * @param {string} newClasses
 * @param {string} oldClasses
 */
angular.IAttributes.prototype.$updateClass = function(newClasses, oldClasses) {};

/**
 * @param {string} key
 * @param {Object} value
 */
angular.IAttributes.prototype.$set = function(key, value) {};

/**
 * @param {string} name
 * @param {Function} fn
 * @return {Function}
 */
angular.IAttributes.prototype.$observe = function(name, fn) {};

/**
 * @interface
 */
angular.IFormController = function() {};
/**
 * @type {boolean}
 */
angular.IFormController.prototype.$pristine;

/**
 * @type {boolean}
 */
angular.IFormController.prototype.$dirty;

/**
 * @type {boolean}
 */
angular.IFormController.prototype.$valid;

/**
 * @type {boolean}
 */
angular.IFormController.prototype.$invalid;

/**
 * @type {boolean}
 */
angular.IFormController.prototype.$submitted;

/**
 * @type {Object}
 */
angular.IFormController.prototype.$error;

/**
 * @type {Object}
 */
angular.IFormController.prototype.$pending;

/**
 * @param {Object} control
 */
angular.IFormController.prototype.$addControl = function(control) {};

/**
 * @param {Object} control
 */
angular.IFormController.prototype.$removeControl = function(control) {};

/**
 * @param {string} validationErrorKey
 * @param {boolean} isValid
 * @param {Object} control
 */
angular.IFormController.prototype.$setValidity = function(validationErrorKey, isValid, control) {};

/**
 */
angular.IFormController.prototype.$setDirty = function() {};

/**
 */
angular.IFormController.prototype.$setPristine = function() {};

/**
 */
angular.IFormController.prototype.$commitViewValue = function() {};

/**
 */
angular.IFormController.prototype.$rollbackViewValue = function() {};

/**
 */
angular.IFormController.prototype.$setSubmitted = function() {};

/**
 */
angular.IFormController.prototype.$setUntouched = function() {};

/**
 * @interface
 */
angular.INgModelController = function() {};
/**
 * @type {Object}
 */
angular.INgModelController.prototype.$viewValue;

/**
 * @type {Object}
 */
angular.INgModelController.prototype.$modelValue;

/**
 * @type {Array}
 */
angular.INgModelController.prototype.$parsers;

/**
 * @type {Array}
 */
angular.INgModelController.prototype.$formatters;

/**
 * @type {Array}
 */
angular.INgModelController.prototype.$viewChangeListeners;

/**
 * @type {Object}
 */
angular.INgModelController.prototype.$error;

/**
 * @type {string}
 */
angular.INgModelController.prototype.$name;

/**
 * @type {boolean}
 */
angular.INgModelController.prototype.$touched;

/**
 * @type {boolean}
 */
angular.INgModelController.prototype.$untouched;

/**
 * @type {angular.IModelValidators}
 */
angular.INgModelController.prototype.$validators;

/**
 * @type {angular.IAsyncModelValidators}
 */
angular.INgModelController.prototype.$asyncValidators;

/**
 * @type {Object}
 */
angular.INgModelController.prototype.$pending;

/**
 * @type {boolean}
 */
angular.INgModelController.prototype.$pristine;

/**
 * @type {boolean}
 */
angular.INgModelController.prototype.$dirty;

/**
 * @type {boolean}
 */
angular.INgModelController.prototype.$valid;

/**
 * @type {boolean}
 */
angular.INgModelController.prototype.$invalid;

/**
 */
angular.INgModelController.prototype.$render = function() {};

/**
 * @param {string} validationErrorKey
 * @param {boolean} isValid
 */
angular.INgModelController.prototype.$setValidity = function(validationErrorKey, isValid) {};

/**
 * @param {Object} value
 * @param {string=} trigger
 */
angular.INgModelController.prototype.$setViewValue = function(value, trigger) {};

/**
 */
angular.INgModelController.prototype.$setPristine = function() {};

/**
 */
angular.INgModelController.prototype.$setDirty = function() {};

/**
 */
angular.INgModelController.prototype.$validate = function() {};

/**
 */
angular.INgModelController.prototype.$setTouched = function() {};

/**
 */
angular.INgModelController.prototype.$setUntouched = function() {};

/**
 */
angular.INgModelController.prototype.$rollbackViewValue = function() {};

/**
 */
angular.INgModelController.prototype.$commitViewValue = function() {};

/**
 * @param {Object} value
 * @return {boolean}
 */
angular.INgModelController.prototype.$isEmpty = function(value) {};

/**
 * @interface
 */
angular.INgModelOptions = function() {};
/**
 * @type {string}
 */
angular.INgModelOptions.prototype.updateOn;

/**
 * @type {Object}
 */
angular.INgModelOptions.prototype.debounce;

/**
 * @type {boolean}
 */
angular.INgModelOptions.prototype.allowInvalid;

/**
 * @type {boolean}
 */
angular.INgModelOptions.prototype.getterSetter;

/**
 * @type {string}
 */
angular.INgModelOptions.prototype.timezone;

/**
 * @interface
 */
angular.IModelValidators = function() {};
/**
 * @interface
 */
angular.IAsyncModelValidators = function() {};
/**
 * @interface
 */
angular.IRootScopeService = function() {};
/**
 * @type {angular.IScope}
 */
angular.IRootScopeService.prototype.$parent;

/**
 * @type {angular.IRootScopeService}
 */
angular.IRootScopeService.prototype.$root;

/**
 * @type {number}
 */
angular.IRootScopeService.prototype.$id;

/**
 * @type {Object}
 */
angular.IRootScopeService.prototype.$$isolateBindings;

/**
 * @type {Object}
 */
angular.IRootScopeService.prototype.$$phase;

/**
 * @param {Object} exp
 * @return {Object}
 */
angular.IRootScopeService.prototype.$apply = function(exp) {};

/**
 * @param {Object} exp
 * @return {Object}
 */
angular.IRootScopeService.prototype.$applyAsync = function(exp) {};

/**
 * @param {string} name
 * @param {...Object} args
 * @return {angular.IAngularEvent}
 */
angular.IRootScopeService.prototype.$broadcast = function(name, args) {};

/**
 */
angular.IRootScopeService.prototype.$destroy = function() {};

/**
 */
angular.IRootScopeService.prototype.$digest = function() {};

/**
 * @param {string} name
 * @param {...Object} args
 * @return {angular.IAngularEvent}
 */
angular.IRootScopeService.prototype.$emit = function(name, args) {};

/**
 * @param {Object} expression
 * @param {Object=} locals
 * @return {Object}
 */
angular.IRootScopeService.prototype.$eval = function(expression, locals) {};

/**
 * @param {Object} expression
 */
angular.IRootScopeService.prototype.$evalAsync = function(expression) {};

/**
 * @param {boolean=} isolate
 * @param {Object=} parent
 * @return {angular.IScope}
 */
angular.IRootScopeService.prototype.$new = function(isolate, parent) {};

/**
 * @param {string} name
 * @param {Function} listener
 * @return {Function}
 */
angular.IRootScopeService.prototype.$on = function(name, listener) {};

/**
 * @param {Object} watchExpression
 * @param {Object=} listener
 * @param {boolean=} objectEquality
 * @return {Function}
 */
angular.IRootScopeService.prototype.$watch = function(watchExpression, listener, objectEquality) {};

/**
 * @param {Object} watchExpression
 * @param {Function} listener
 * @return {Function}
 */
angular.IRootScopeService.prototype.$watchCollection = function(watchExpression, listener) {};

/**
 * @param {Array} watchExpressions
 * @param {Function} listener
 * @return {Function}
 */
angular.IRootScopeService.prototype.$watchGroup = function(watchExpressions, listener) {};

/**
 * @interface
 * @extends {angular.IRootScopeService}
 */
angular.IScope = function() {};
/**
 * @interface
 * @extends {angular.IScope}
 */
angular.IRepeatScope = function() {};
/**
 * @type {number}
 */
angular.IRepeatScope.prototype.$index;

/**
 * @type {boolean}
 */
angular.IRepeatScope.prototype.$first;

/**
 * @type {boolean}
 */
angular.IRepeatScope.prototype.$middle;

/**
 * @type {boolean}
 */
angular.IRepeatScope.prototype.$last;

/**
 * @type {boolean}
 */
angular.IRepeatScope.prototype.$even;

/**
 * @type {boolean}
 */
angular.IRepeatScope.prototype.$odd;

/**
 * @interface
 */
angular.IAngularEvent = function() {};
/**
 * @type {angular.IScope}
 */
angular.IAngularEvent.prototype.targetScope;

/**
 * @type {angular.IScope}
 */
angular.IAngularEvent.prototype.currentScope;

/**
 * @type {string}
 */
angular.IAngularEvent.prototype.name;

/**
 * @type {Function}
 */
angular.IAngularEvent.prototype.stopPropagation;

/**
 * @type {Function}
 */
angular.IAngularEvent.prototype.preventDefault;

/**
 * @type {boolean}
 */
angular.IAngularEvent.prototype.defaultPrevented;

/**
 * @constructor
 * @extends {Window}
 */
angular.IWindowService = function() {}

/**
 * @interface
 */
angular.ITimeoutService = function() {};
/**
 * @param {Object=} promise
 * @return {boolean}
 */
angular.ITimeoutService.prototype.cancel = function(promise) {};

/**
 * @interface
 */
angular.IIntervalService = function() {};
/**
 * @param {Object} promise
 * @return {boolean}
 */
angular.IIntervalService.prototype.cancel = function(promise) {};

/**
 * @interface
 */
angular.IFilterFilterPatternObject = function() {};
/**
 * @interface
 * @extends {angular.IServiceProvider}
 */
angular.IFilterProvider = function() {};
/**
 * @param {Object} name
 * @return {angular.IServiceProvider}
 */
angular.IFilterProvider.prototype.register = function(name) {};

/**
 * @interface
 */
angular.ILocaleService = function() {};
/**
 * @type {string}
 */
angular.ILocaleService.prototype.id;

/**
 * @type {angular.ILocaleNumberFormatDescriptor}
 */
angular.ILocaleService.prototype.NUMBER_FORMATS;

/**
 * @type {angular.ILocaleDateTimeFormatDescriptor}
 */
angular.ILocaleService.prototype.DATETIME_FORMATS;

/**
 * @type {Function}
 */
angular.ILocaleService.prototype.pluralCat;

/**
 * @interface
 */
angular.ILocaleNumberFormatDescriptor = function() {};
/**
 * @type {string}
 */
angular.ILocaleNumberFormatDescriptor.prototype.DECIMAL_SEP;

/**
 * @type {string}
 */
angular.ILocaleNumberFormatDescriptor.prototype.GROUP_SEP;

/**
 * @type {Array}
 */
angular.ILocaleNumberFormatDescriptor.prototype.PATTERNS;

/**
 * @type {string}
 */
angular.ILocaleNumberFormatDescriptor.prototype.CURRENCY_SYM;

/**
 * @interface
 */
angular.ILocaleNumberPatternDescriptor = function() {};
/**
 * @type {number}
 */
angular.ILocaleNumberPatternDescriptor.prototype.minInt;

/**
 * @type {number}
 */
angular.ILocaleNumberPatternDescriptor.prototype.minFrac;

/**
 * @type {number}
 */
angular.ILocaleNumberPatternDescriptor.prototype.maxFrac;

/**
 * @type {string}
 */
angular.ILocaleNumberPatternDescriptor.prototype.posPre;

/**
 * @type {string}
 */
angular.ILocaleNumberPatternDescriptor.prototype.posSuf;

/**
 * @type {string}
 */
angular.ILocaleNumberPatternDescriptor.prototype.negPre;

/**
 * @type {string}
 */
angular.ILocaleNumberPatternDescriptor.prototype.negSuf;

/**
 * @type {number}
 */
angular.ILocaleNumberPatternDescriptor.prototype.gSize;

/**
 * @type {number}
 */
angular.ILocaleNumberPatternDescriptor.prototype.lgSize;

/**
 * @interface
 */
angular.ILocaleDateTimeFormatDescriptor = function() {};
/**
 * @type {Array}
 */
angular.ILocaleDateTimeFormatDescriptor.prototype.MONTH;

/**
 * @type {Array}
 */
angular.ILocaleDateTimeFormatDescriptor.prototype.SHORTMONTH;

/**
 * @type {Array}
 */
angular.ILocaleDateTimeFormatDescriptor.prototype.DAY;

/**
 * @type {Array}
 */
angular.ILocaleDateTimeFormatDescriptor.prototype.SHORTDAY;

/**
 * @type {Array}
 */
angular.ILocaleDateTimeFormatDescriptor.prototype.AMPMS;

/**
 * @type {string}
 */
angular.ILocaleDateTimeFormatDescriptor.prototype.medium;

/**
 * @type {string}
 */
angular.ILocaleDateTimeFormatDescriptor.prototype.short;

/**
 * @type {string}
 */
angular.ILocaleDateTimeFormatDescriptor.prototype.fullDate;

/**
 * @type {string}
 */
angular.ILocaleDateTimeFormatDescriptor.prototype.longDate;

/**
 * @type {string}
 */
angular.ILocaleDateTimeFormatDescriptor.prototype.mediumDate;

/**
 * @type {string}
 */
angular.ILocaleDateTimeFormatDescriptor.prototype.shortDate;

/**
 * @type {string}
 */
angular.ILocaleDateTimeFormatDescriptor.prototype.mediumTime;

/**
 * @type {string}
 */
angular.ILocaleDateTimeFormatDescriptor.prototype.shortTime;

/**
 * @interface
 */
angular.ILogService = function() {};
/**
 * @type {Function}
 */
angular.ILogService.prototype.debug;

/**
 * @type {Function}
 */
angular.ILogService.prototype.error;

/**
 * @type {Function}
 */
angular.ILogService.prototype.info;

/**
 * @type {Function}
 */
angular.ILogService.prototype.log;

/**
 * @type {Function}
 */
angular.ILogService.prototype.warn;

/**
 * @interface
 * @extends {angular.IServiceProvider}
 */
angular.ILogProvider = function() {};
/**
 * @param {boolean} enabled
 * @return {Object}
 */
angular.ILogProvider.prototype.debugEnabled = function(enabled) {};

/**
 * @interface
 */
angular.IParseProvider = function() {};
/**
 * @param {boolean} value
 * @return {Object}
 */
angular.IParseProvider.prototype.logPromiseWarnings = function(value) {};

/**
 * @param {boolean} value
 * @return {Object}
 */
angular.IParseProvider.prototype.unwrapPromises = function(value) {};

/**
 * @interface
 */
angular.ICompiledExpression = function() {};
/**
 * @type {boolean}
 */
angular.ICompiledExpression.prototype.literal;

/**
 * @type {boolean}
 */
angular.ICompiledExpression.prototype.constant;

/**
 * @param {Object} context
 * @param {Object} value
 * @return {Object}
 */
angular.ICompiledExpression.prototype.assign = function(context, value) {};

/**
 * @interface
 */
angular.ILocationService = function() {};
/**
 * @return {string}
 */
angular.ILocationService.prototype.absUrl = function() {};

/**
 * @param {string} newHash
 * @return {Object}
 */
angular.ILocationService.prototype.hash = function(newHash) {};

/**
 * @return {string}
 */
angular.ILocationService.prototype.host = function() {};

/**
 * @param {string} path
 * @return {Object}
 */
angular.ILocationService.prototype.path = function(path) {};

/**
 * @return {number}
 */
angular.ILocationService.prototype.port = function() {};

/**
 * @return {string}
 */
angular.ILocationService.prototype.protocol = function() {};

/**
 * @return {angular.ILocationService}
 */
angular.ILocationService.prototype.replace = function() {};

/**
 * @param {Object} search
 * @param {Object} paramValue
 * @return {Object}
 */
angular.ILocationService.prototype.search = function(search, paramValue) {};

/**
 * @param {Object} state
 * @return {Object}
 */
angular.ILocationService.prototype.state = function(state) {};

/**
 * @param {string} url
 * @return {Object}
 */
angular.ILocationService.prototype.url = function(url) {};

/**
 * @interface
 * @extends {angular.IServiceProvider}
 */
angular.ILocationProvider = function() {};
/**
 * @param {string} prefix
 * @return {Object}
 */
angular.ILocationProvider.prototype.hashPrefix = function(prefix) {};

/**
 * @param {Object} active
 * @return {Object}
 */
angular.ILocationProvider.prototype.html5Mode = function(active) {};

/**
 * @interface
 * @extends {angular.IAugmentedJQuery}
 */
angular.IDocumentService = function() {};
/**
 * @interface
 * @extends {JQuery}
 */
angular.IRootElementService = function() {};
/**
 * @interface
 */
angular.IPromise = function() {};
/**
 * @param {Function} successCallback
 * @param {Function=} errorCallback
 * @param {Function=} notifyCallback
 * @return {angular.IPromise}
 */
angular.IPromise.prototype.then = function(successCallback, errorCallback, notifyCallback) {};

/**
 * @param {Function} onRejected
 * @return {angular.IPromise}
 */
angular.IPromise.prototype.catch = function(onRejected) {};

/**
 * @param {Function} finallyCallback
 * @return {angular.IPromise}
 */
angular.IPromise.prototype.finally = function(finallyCallback) {};

/**
 * @interface
 */
angular.IDeferred = function() {};
/**
 * @type {angular.IPromise}
 */
angular.IDeferred.prototype.promise;

/**
 * @param {Object=} value
 */
angular.IDeferred.prototype.resolve = function(value) {};

/**
 * @param {Object=} reason
 */
angular.IDeferred.prototype.reject = function(reason) {};

/**
 * @param {Object=} state
 */
angular.IDeferred.prototype.notify = function(state) {};

/**
 * @interface
 */
angular.IAnchorScrollService = function() {};
/**
 * @type {Object}
 */
angular.IAnchorScrollService.prototype.yOffset;

/**
 * @interface
 * @extends {angular.IServiceProvider}
 */
angular.IAnchorScrollProvider = function() {};
/**
 */
angular.IAnchorScrollProvider.prototype.disableAutoScrolling = function() {};

/**
 * @interface
 */
angular.ICacheFactoryService = function() {};
/**
 * @return {Object}
 */
angular.ICacheFactoryService.prototype.info = function() {};

/**
 * @param {string} cacheId
 * @return {angular.ICacheObject}
 */
angular.ICacheFactoryService.prototype.get = function(cacheId) {};

/**
 * @interface
 */
angular.ICacheObject = function() {};
/**
 * @return {Object}
 */
angular.ICacheObject.prototype.info = function() {};

/**
 * @param {string} key
 * @param {Object=} value
 * @return {Object}
 */
angular.ICacheObject.prototype.put = function(key, value) {};

/**
 * @param {string} key
 * @return {Object}
 */
angular.ICacheObject.prototype.get = function(key) {};

/**
 * @param {string} key
 */
angular.ICacheObject.prototype.remove = function(key) {};

/**
 */
angular.ICacheObject.prototype.removeAll = function() {};

/**
 */
angular.ICacheObject.prototype.destroy = function() {};

/**
 * @interface
 * @extends {angular.IServiceProvider}
 */
angular.ICompileProvider = function() {};
/**
 * @param {Object} name
 * @param {Object} directiveFactory
 * @return {angular.ICompileProvider}
 */
angular.ICompileProvider.prototype.directive = function(name, directiveFactory) {};

/**
 * @param {string} name
 * @param {Object} options
 * @return {angular.ICompileProvider}
 */
angular.ICompileProvider.prototype.component = function(name, options) {};

/**
 * @param {RegExp} regexp
 * @return {Object}
 */
angular.ICompileProvider.prototype.aHrefSanitizationWhitelist = function(regexp) {};

/**
 * @param {RegExp} regexp
 * @return {Object}
 */
angular.ICompileProvider.prototype.imgSrcSanitizationWhitelist = function(regexp) {};

/**
 * @param {boolean=} enabled
 * @return {Object}
 */
angular.ICompileProvider.prototype.debugInfoEnabled = function(enabled) {};

/**
 * @interface
 * @extends {angular.IServiceProvider}
 */
angular.IControllerProvider = function() {};
/**
 * @param {string} name
 * @param {Object} controllerConstructor
 */
angular.IControllerProvider.prototype.register = function(name, controllerConstructor) {};

/**
 */
angular.IControllerProvider.prototype.allowGlobals = function() {};

/**
 * @interface
 */
angular.IHttpService = function() {};
/**
 * @type {angular.IHttpProviderDefaults}
 */
angular.IHttpService.prototype.defaults;

/**
 * @type {Array}
 */
angular.IHttpService.prototype.pendingRequests;

/**
 * @param {string} url
 * @param {Object=} config
 * @return {angular.IHttpPromise}
 */
angular.IHttpService.prototype.get = function(url, config) {};

/**
 * @param {string} url
 * @param {Object=} config
 * @return {angular.IHttpPromise}
 */
angular.IHttpService.prototype.delete = function(url, config) {};

/**
 * @param {string} url
 * @param {Object=} config
 * @return {angular.IHttpPromise}
 */
angular.IHttpService.prototype.head = function(url, config) {};

/**
 * @param {string} url
 * @param {Object=} config
 * @return {angular.IHttpPromise}
 */
angular.IHttpService.prototype.jsonp = function(url, config) {};

/**
 * @param {string} url
 * @param {Object} data
 * @param {Object=} config
 * @return {angular.IHttpPromise}
 */
angular.IHttpService.prototype.post = function(url, data, config) {};

/**
 * @param {string} url
 * @param {Object} data
 * @param {Object=} config
 * @return {angular.IHttpPromise}
 */
angular.IHttpService.prototype.put = function(url, data, config) {};

/**
 * @param {string} url
 * @param {Object} data
 * @param {Object=} config
 * @return {angular.IHttpPromise}
 */
angular.IHttpService.prototype.patch = function(url, data, config) {};

/**
 * @interface
 * @extends {angular.IHttpProviderDefaults}
 */
angular.IRequestShortcutConfig = function() {};
/**
 * @type {Object}
 */
angular.IRequestShortcutConfig.prototype.params;

/**
 * @type {Object}
 */
angular.IRequestShortcutConfig.prototype.data;

/**
 * @type {Object}
 */
angular.IRequestShortcutConfig.prototype.timeout;

/**
 * @type {string}
 */
angular.IRequestShortcutConfig.prototype.responseType;

/**
 * @interface
 * @extends {angular.IRequestShortcutConfig}
 */
angular.IRequestConfig = function() {};
/**
 * @type {string}
 */
angular.IRequestConfig.prototype.method;

/**
 * @type {string}
 */
angular.IRequestConfig.prototype.url;

/**
 * @interface
 */
angular.IHttpPromiseCallbackArg = function() {};
/**
 * @type {Object}
 */
angular.IHttpPromiseCallbackArg.prototype.data;

/**
 * @type {number}
 */
angular.IHttpPromiseCallbackArg.prototype.status;

/**
 * @type {Function}
 */
angular.IHttpPromiseCallbackArg.prototype.headers;

/**
 * @type {angular.IRequestConfig}
 */
angular.IHttpPromiseCallbackArg.prototype.config;

/**
 * @type {string}
 */
angular.IHttpPromiseCallbackArg.prototype.statusText;

/**
 * @interface
 * @extends {angular.IPromise}
 */
angular.IHttpPromise = function() {};
/**
 * @param {Function} callback
 * @return {angular.IHttpPromise}
 */
angular.IHttpPromise.prototype.success = function(callback) {};

/**
 * @param {Function} callback
 * @return {angular.IHttpPromise}
 */
angular.IHttpPromise.prototype.error = function(callback) {};

/**
 * @interface
 */
angular.IHttpRequestConfigHeaders = function() {};
/**
 * @type {Object}
 */
angular.IHttpRequestConfigHeaders.prototype.common;

/**
 * @type {Object}
 */
angular.IHttpRequestConfigHeaders.prototype.get;

/**
 * @type {Object}
 */
angular.IHttpRequestConfigHeaders.prototype.post;

/**
 * @type {Object}
 */
angular.IHttpRequestConfigHeaders.prototype.put;

/**
 * @type {Object}
 */
angular.IHttpRequestConfigHeaders.prototype.patch;

/**
 * @interface
 */
angular.IHttpProviderDefaults = function() {};
/**
 * @type {Object}
 */
angular.IHttpProviderDefaults.prototype.cache;

/**
 * @type {Object}
 */
angular.IHttpProviderDefaults.prototype.transformRequest;

/**
 * @type {Object}
 */
angular.IHttpProviderDefaults.prototype.transformResponse;

/**
 * @type {angular.IHttpRequestConfigHeaders}
 */
angular.IHttpProviderDefaults.prototype.headers;

/**
 * @type {string}
 */
angular.IHttpProviderDefaults.prototype.xsrfHeaderName;

/**
 * @type {string}
 */
angular.IHttpProviderDefaults.prototype.xsrfCookieName;

/**
 * @type {boolean}
 */
angular.IHttpProviderDefaults.prototype.withCredentials;

/**
 * @type {Object}
 */
angular.IHttpProviderDefaults.prototype.paramSerializer;

/**
 * @interface
 */
angular.IHttpInterceptor = function() {};
/**
 * @type {Function}
 */
angular.IHttpInterceptor.prototype.request;

/**
 * @type {Function}
 */
angular.IHttpInterceptor.prototype.requestError;

/**
 * @type {Function}
 */
angular.IHttpInterceptor.prototype.response;

/**
 * @type {Function}
 */
angular.IHttpInterceptor.prototype.responseError;

/**
 * @interface
 * @extends {angular.IServiceProvider}
 */
angular.IHttpProvider = function() {};
/**
 * @type {angular.IHttpProviderDefaults}
 */
angular.IHttpProvider.prototype.defaults;

/**
 * @type {Array}
 */
angular.IHttpProvider.prototype.interceptors;

/**
 * @param {boolean} value
 * @return {Object}
 */
angular.IHttpProvider.prototype.useApplyAsync = function(value) {};

/**
 * @param {boolean} value
 * @return {Object}
 */
angular.IHttpProvider.prototype.useLegacyPromiseExtensions = function(value) {};

/**
 * @interface
 */
angular.IInterpolateService = function() {};
/**
 * @return {string}
 */
angular.IInterpolateService.prototype.endSymbol = function() {};

/**
 * @return {string}
 */
angular.IInterpolateService.prototype.startSymbol = function() {};

/**
 * @interface
 * @extends {angular.IServiceProvider}
 */
angular.IInterpolateProvider = function() {};
/**
 * @param {string} value
 * @return {Object}
 */
angular.IInterpolateProvider.prototype.startSymbol = function(value) {};

/**
 * @param {string} value
 * @return {Object}
 */
angular.IInterpolateProvider.prototype.endSymbol = function(value) {};

/**
 * @interface
 * @extends {angular.ICacheObject}
 */
angular.ITemplateCacheService = function() {};
/**
 * @interface
 */
angular.ISCEService = function() {};
/**
 * @param {string} type
 * @param {Object} mayBeTrusted
 * @return {Object}
 */
angular.ISCEService.prototype.getTrusted = function(type, mayBeTrusted) {};

/**
 * @param {Object} value
 * @return {Object}
 */
angular.ISCEService.prototype.getTrustedCss = function(value) {};

/**
 * @param {Object} value
 * @return {Object}
 */
angular.ISCEService.prototype.getTrustedHtml = function(value) {};

/**
 * @param {Object} value
 * @return {Object}
 */
angular.ISCEService.prototype.getTrustedJs = function(value) {};

/**
 * @param {Object} value
 * @return {Object}
 */
angular.ISCEService.prototype.getTrustedResourceUrl = function(value) {};

/**
 * @param {Object} value
 * @return {Object}
 */
angular.ISCEService.prototype.getTrustedUrl = function(value) {};

/**
 * @param {string} type
 * @param {string} expression
 * @return {Function}
 */
angular.ISCEService.prototype.parse = function(type, expression) {};

/**
 * @param {string} expression
 * @return {Function}
 */
angular.ISCEService.prototype.parseAsCss = function(expression) {};

/**
 * @param {string} expression
 * @return {Function}
 */
angular.ISCEService.prototype.parseAsHtml = function(expression) {};

/**
 * @param {string} expression
 * @return {Function}
 */
angular.ISCEService.prototype.parseAsJs = function(expression) {};

/**
 * @param {string} expression
 * @return {Function}
 */
angular.ISCEService.prototype.parseAsResourceUrl = function(expression) {};

/**
 * @param {string} expression
 * @return {Function}
 */
angular.ISCEService.prototype.parseAsUrl = function(expression) {};

/**
 * @param {string} type
 * @param {Object} value
 * @return {Object}
 */
angular.ISCEService.prototype.trustAs = function(type, value) {};

/**
 * @param {Object} value
 * @return {Object}
 */
angular.ISCEService.prototype.trustAsHtml = function(value) {};

/**
 * @param {Object} value
 * @return {Object}
 */
angular.ISCEService.prototype.trustAsJs = function(value) {};

/**
 * @param {Object} value
 * @return {Object}
 */
angular.ISCEService.prototype.trustAsResourceUrl = function(value) {};

/**
 * @param {Object} value
 * @return {Object}
 */
angular.ISCEService.prototype.trustAsUrl = function(value) {};

/**
 * @return {boolean}
 */
angular.ISCEService.prototype.isEnabled = function() {};

/**
 * @interface
 * @extends {angular.IServiceProvider}
 */
angular.ISCEProvider = function() {};
/**
 * @param {boolean} value
 */
angular.ISCEProvider.prototype.enabled = function(value) {};

/**
 * @interface
 */
angular.ISCEDelegateService = function() {};
/**
 * @param {string} type
 * @param {Object} mayBeTrusted
 * @return {Object}
 */
angular.ISCEDelegateService.prototype.getTrusted = function(type, mayBeTrusted) {};

/**
 * @param {string} type
 * @param {Object} value
 * @return {Object}
 */
angular.ISCEDelegateService.prototype.trustAs = function(type, value) {};

/**
 * @param {Object} value
 * @return {Object}
 */
angular.ISCEDelegateService.prototype.valueOf = function(value) {};

/**
 * @interface
 * @extends {angular.IServiceProvider}
 */
angular.ISCEDelegateProvider = function() {};
/**
 * @param {Array} blacklist
 * @return {Object}
 */
angular.ISCEDelegateProvider.prototype.resourceUrlBlacklist = function(blacklist) {};

/**
 * @param {Array} whitelist
 * @return {Object}
 */
angular.ISCEDelegateProvider.prototype.resourceUrlWhitelist = function(whitelist) {};

/**
 * @interface
 */
angular.ITemplateRequestService = function() {};
/**
 * @type {number}
 */
angular.ITemplateRequestService.prototype.totalPendingRequests;

/**
 * @constructor
 * @extends {Function}
 * @param {...Object} args
 */
angular.Type = function(args) {}

/**
 * @interface
 */
angular.RouteDefinition = function() {};
/**
 * @type {string}
 */
angular.RouteDefinition.prototype.path;

/**
 * @type {string}
 */
angular.RouteDefinition.prototype.aux;

/**
 * @type {Object}
 */
angular.RouteDefinition.prototype.component;

/**
 * @type {Function}
 */
angular.RouteDefinition.prototype.loader;

/**
 * @type {Array}
 */
angular.RouteDefinition.prototype.redirectTo;

/**
 * @type {string}
 */
angular.RouteDefinition.prototype.as;

/**
 * @type {string}
 */
angular.RouteDefinition.prototype.name;

/**
 * @type {Object}
 */
angular.RouteDefinition.prototype.data;

/**
 * @type {boolean}
 */
angular.RouteDefinition.prototype.useAsDefault;

/**
 * @interface
 */
angular.ComponentDefinition = function() {};
/**
 * @type {string}
 */
angular.ComponentDefinition.prototype.type;

/**
 * @type {Function}
 */
angular.ComponentDefinition.prototype.loader;

/**
 * @type {angular.Type}
 */
angular.ComponentDefinition.prototype.component;

/**
 * @interface
 */
angular.IComponentOptions = function() {};
/**
 * @type {Object}
 */
angular.IComponentOptions.prototype.controller;

/**
 * @type {string}
 */
angular.IComponentOptions.prototype.controllerAs;

/**
 * @type {Object}
 */
angular.IComponentOptions.prototype.template;

/**
 * @type {Object}
 */
angular.IComponentOptions.prototype.templateUrl;

/**
 * @type {Object}
 */
angular.IComponentOptions.prototype.bindings;

/**
 * @type {Object}
 */
angular.IComponentOptions.prototype.transclude;

/**
 * @type {Object}
 */
angular.IComponentOptions.prototype.require;

/**
 * @interface
 */
angular.IDirectivePrePost = function() {};
/**
 * @type {Function}
 */
angular.IDirectivePrePost.prototype.pre;

/**
 * @type {Function}
 */
angular.IDirectivePrePost.prototype.post;

/**
 * @interface
 */
angular.IDirective = function() {};
/**
 * @type {Function}
 */
angular.IDirective.prototype.compile;

/**
 * @type {Object}
 */
angular.IDirective.prototype.controller;

/**
 * @type {string}
 */
angular.IDirective.prototype.controllerAs;

/**
 * @type {Object}
 */
angular.IDirective.prototype.bindToController;

/**
 * @type {Object}
 */
angular.IDirective.prototype.link;

/**
 * @type {boolean}
 */
angular.IDirective.prototype.multiElement;

/**
 * @type {string}
 */
angular.IDirective.prototype.name;

/**
 * @type {number}
 */
angular.IDirective.prototype.priority;

/**
 * @type {boolean}
 */
angular.IDirective.prototype.replace;

/**
 * @type {Object}
 */
angular.IDirective.prototype.require;

/**
 * @type {string}
 */
angular.IDirective.prototype.restrict;

/**
 * @type {Object}
 */
angular.IDirective.prototype.scope;

/**
 * @type {Object}
 */
angular.IDirective.prototype.template;

/**
 * @type {string}
 */
angular.IDirective.prototype.templateNamespace;

/**
 * @type {Object}
 */
angular.IDirective.prototype.templateUrl;

/**
 * @type {boolean}
 */
angular.IDirective.prototype.terminal;

/**
 * @type {Object}
 */
angular.IDirective.prototype.transclude;

/**
 * @interface
 * @extends {JQuery}
 */
angular.IAugmentedJQuery = function() {};
/**
 * @param {string} name
 * @return {Object}
 */
angular.IAugmentedJQuery.prototype.controller = function(name) {};

/**
 * @return {Object}
 */
angular.IAugmentedJQuery.prototype.injector = function() {};

/**
 * @return {angular.IScope}
 */
angular.IAugmentedJQuery.prototype.scope = function() {};

/**
 * @return {angular.IScope}
 */
angular.IAugmentedJQuery.prototype.isolateScope = function() {};

/**
 * @param {Object} key
 * @param {Object} value
 * @return {Object}
 */
angular.IAugmentedJQuery.prototype.inheritedData = function(key, value) {};

/**
 * @interface
 */
angular.auto.IInjectorService = function() {};
/**
 * @type {boolean}
 */
angular.auto.IInjectorService.prototype.strictDi;

/**
 * @param {Object} fn
 * @param {boolean=} strictDi
 * @return {Array}
 */
angular.auto.IInjectorService.prototype.annotate = function(fn, strictDi) {};

/**
 * @param {string} name
 * @param {string=} caller
 * @return {Object}
 */
angular.auto.IInjectorService.prototype.get = function(name, caller) {};

/**
 * @param {string} name
 * @return {boolean}
 */
angular.auto.IInjectorService.prototype.has = function(name) {};

/**
 * @param {Function} typeConstructor
 * @param {Object=} locals
 * @return {Object}
 */
angular.auto.IInjectorService.prototype.instantiate = function(typeConstructor, locals) {};

/**
 * @param {Object} inlineAnnotatedFunction
 * @param {Object=} context
 * @param {Object=} locals
 * @return {Object}
 */
angular.auto.IInjectorService.prototype.invoke = function(inlineAnnotatedFunction, context, locals) {};

/**
 * @interface
 */
angular.auto.IProvideService = function() {};
/**
 * @param {string} name
 * @param {Object} value
 */
angular.auto.IProvideService.prototype.constant = function(name, value) {};

/**
 * @param {string} name
 * @param {Object} decorator
 */
angular.auto.IProvideService.prototype.decorator = function(name, decorator) {};

/**
 * @param {string} name
 * @param {Object} serviceFactoryFunction
 * @return {angular.IServiceProvider}
 */
angular.auto.IProvideService.prototype.factory = function(name, serviceFactoryFunction) {};

/**
 * @param {string} name
 * @param {Object} provider
 * @return {angular.IServiceProvider}
 */
angular.auto.IProvideService.prototype.provider = function(name, provider) {};

/**
 * @param {string} name
 * @param {Object} constructor
 * @return {angular.IServiceProvider}
 */
angular.auto.IProvideService.prototype.service = function(name, constructor) {};

/**
 * @param {string} name
 * @param {Object} value
 * @return {angular.IServiceProvider}
 */
angular.auto.IProvideService.prototype.value = function(name, value) {};

