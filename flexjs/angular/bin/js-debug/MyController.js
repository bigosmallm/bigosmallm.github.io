/**
 * Generated by Apache Flex Cross-Compiler from MyController.as
 * MyController
 *
 * @fileoverview
 *
 * @suppress {checkTypes|accessControls}
 */

goog.provide('MyController');




/**
 * @constructor
 * @param {angular.IScope} scope
 * @param {angular.material.MDDialogService} mdDialog
 */
MyController = function(scope, mdDialog) {
  this.$scope = scope;
  this.$mdDialog = mdDialog;
  this.$scope["handleBtnClick"] = org.apache.flex.utils.Language.closure(this.handleBtnClick, this, 'handleBtnClick');
  this.$scope["close"] = org.apache.flex.utils.Language.closure(this.close, this, 'close');
  this.$scope["myDate"] = new Date();
  this.$scope["btnLabelStr"] = "Click me";
};


/**
 * @private
 * @type {angular.IScope}
 */
MyController.prototype.$scope;


/**
 * @private
 * @type {angular.material.MDDialogService}
 */
MyController.prototype.$mdDialog;


/**
 * @private
 */
MyController.prototype.setupWatchForDate = function() {
  this.$scope.$watch('myDate', org.apache.flex.utils.Language.closure(this.handleDateChange, this, 'handleDateChange'), true);
};


/**
 * @private
 */
MyController.prototype.handleDateChange = function() {
  alert('Date selected: ' + this.$scope["myDate"].toString());
};


/**
 * @export
 * @param {Event} event
 */
MyController.prototype.handleBtnClick = function(event) {
  this.$mdDialog.show({scope:this.$scope, preserveScope:true, template:'<div layout="column" layout-align="left center" style="width:500px; height:500px; margin:25px;"><h3>Select a date: </h3><md-datepicker ng-model="myDate" md-placeholder="Enter date"></md-datepicker><br>Selected date: {{myDate}}<span flex/><div layout="row"><span flex/><md-button ng-click=close()>CLOSE</md-button></div></div>', clickOutsideToClose:true, openFrom:angular.element(document.querySelector('#myBtn')), closeTo:angular.element(document.querySelector('#myBtn'))});
};


/**
 * @private
 */
MyController.prototype.close = function() {
  this.$mdDialog.cancel();
};


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
MyController.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'MyController', qName: 'MyController'}] };


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('MyController', MyController);



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
MyController.prototype.FLEXJS_REFLECTION_INFO = function () {
  return {
    variables: function () {
      return {
      };
    },
    accessors: function () {
      return {
      };
    },
    methods: function () {
      return {
        'MyController': { type: '', declaredBy: 'MyController'},
        'handleBtnClick': { type: 'void', declaredBy: 'MyController'}
      };
    }
  };
};