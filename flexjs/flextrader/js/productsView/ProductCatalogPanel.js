/**
 * Generated by Apache Flex Cross-Compiler from productsView\ProductCatalogPanel.mxml
 * productsView.ProductCatalogPanel
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes}
 */

goog.provide('productsView.ProductCatalogPanel');

goog.require('org.apache.flex.html.Panel');
goog.require('org.apache.flex.html.beads.controllers.DragMouseController');
goog.require('org.apache.flex.core.ParentDocumentBead');
goog.require('productsView.ProductCatalogPanelTitleBarView');
goog.require('productsView.ProductDetails');
goog.require('org.apache.flex.effects.Parallel');
goog.require('productsView.ProductCatalogThumbnail');
goog.require('samples.flexstore.ProductThumbEvent');
goog.require('org.apache.flex.effects.Fade');




/**
 * @constructor
 * @extends {org.apache.flex.html.Panel}
 */
productsView.ProductCatalogPanel = function() {
  productsView.ProductCatalogPanel.base(this, 'constructor');
  
  this.accepted = new Object();
  /**
   * @private
   * @type {org.apache.flex.binding.ContainerDataBinding}
   */
  this.$ID0_;
  
  /**
   * @private
   * @type {org.apache.flex.html.beads.layouts.VerticalLayout}
   */
  this.$ID1_;
  
  /**
   * @private
   * @type {org.apache.flex.html.beads.controllers.DragMouseController}
   */
  this.dragger_;
  
  /**
   * @private
   * @type {org.apache.flex.core.ParentDocumentBead}
   */
  this.pdb_;
  
  /**
   * @private
   * @type {org.apache.flex.html.beads.PanelView}
   */
  this.$ID5_;
  
  /**
   * @private
   * @type {org.apache.flex.html.TitleBar}
   */
  this.$ID4_;
  
  /**
   * @private
   * @type {org.apache.flex.core.SimpleCSSStyles}
   */
  this.$ID2_;
  
  /**
   * @private
   * @type {productsView.ProductCatalogPanelTitleBarView}
   */
  this.$ID3_;
  
  /**
   * @private
   * @type {org.apache.flex.html.Container}
   */
  this.$ID6_;
  
  /**
   * @private
   * @type {org.apache.flex.html.Container}
   */
  this.thumbContentGroup_;
  
  /**
   * @private
   * @type {org.apache.flex.html.supportClasses.ScrollingViewport}
   */
  this.scv_;
  
  /**
   * @private
   * @type {productsView.ProductDetails}
   */
  this.details_;
  
  /**
   * @private
   * @type {org.apache.flex.states.State}
   */
  this.$ID7_;
  
  /**
   * @private
   * @type {org.apache.flex.states.State}
   */
  this.$ID8_;
  
  /**
   * @private
   * @type {org.apache.flex.states.State}
   */
  this.$ID9_;
  
  /**
   * @private
   * @type {Array}
   */
  this.mxmldd;
  
  /**
   * @private
   * @type {Array}
   */
  this.mxmldp;

  this.generateMXMLAttributes
  ([5,
'currentState',
true,
'browse',
'title',
true,
'SpaceHolder',
'className',
true,
'catalogPanel',
'states',
null, [org.apache.flex.states.State, 3, '_id', true, '$ID7', 'name', true, 'browse', 'overrides', null, [org.apache.flex.states.SetProperty, 2, 'name', true, 'title', 'value', true, 'Browse', 0, 0, null], 0, 0, null, org.apache.flex.states.State, 3, '_id', true, '$ID8', 'name', true, 'compare', 'overrides', null, [org.apache.flex.states.SetProperty, 2, 'name', true, 'title', 'value', true, 'Product Comparison', 0, 0, null], 0, 0, null, org.apache.flex.states.State, 3, '_id', true, '$ID9', 'name', true, 'details', 'overrides', null, [org.apache.flex.states.SetProperty, 2, 'name', true, 'title', 'value', true, 'Product Details', 0, 0, null, org.apache.flex.states.SetProperty, 3, 'target', true, 'details', 'name', true, 'visible', 'value', true, true, 0, 0, null], 0, 0, null],
'beads',
null, [org.apache.flex.binding.ContainerDataBinding, 1, '_id', true, '$ID0', 0, 0, null, org.apache.flex.html.beads.layouts.VerticalLayout, 1, '_id', true, '$ID1', 0, 0, null, org.apache.flex.html.beads.controllers.DragMouseController, 1, 'id', true, 'dragger', 0, 0, null, org.apache.flex.core.ParentDocumentBead, 1, 'id', true, 'pdb', 0, 0, null, org.apache.flex.html.beads.PanelView, 2, '_id', true, '$ID5', 'titleBar', false, [org.apache.flex.html.TitleBar, 4, '_id', true, '$ID4', 'height', true, 20, 'style', false, [org.apache.flex.core.SimpleCSSStyles, 2, '_id', true, '$ID2', 'backgroundColor', true, 10901764, 0, 0, null], 'beads', null, [productsView.ProductCatalogPanelTitleBarView, 1, '_id', true, '$ID3', 0, 0, null], 0, 0, null], 0, 0, null],
0,
0
  ]);
  
};
goog.inherits(productsView.ProductCatalogPanel, org.apache.flex.html.Panel);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
productsView.ProductCatalogPanel.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'ProductCatalogPanel', qName: 'productsView.ProductCatalogPanel' }] };


/**
 * @private
 * @type {Object}
 */
productsView.ProductCatalogPanel.prototype.accepted;


/**
 * @private
 * @type {Array}
 */
productsView.ProductCatalogPanel.prototype.thumbnails;


/**
 * @private
 * @type {number}
 */
productsView.ProductCatalogPanel.prototype.filterCount;


/**
 * @private
 * @type {string}
 */
productsView.ProductCatalogPanel.prototype.thumbnailState = 'browse';


/**
 * @export
 * @type {number}
 */
productsView.ProductCatalogPanel.prototype.cartCount_;


/**
 * @private
 * @type {org.apache.flex.collections.LazyCollection}
 */
productsView.ProductCatalogPanel.prototype._catalog;


/**
 * @export
 * @param {org.apache.flex.collections.LazyCollection} c
 */
productsView.ProductCatalogPanel.prototype.__bindingWrappedSetter__catalog = function(c) {
  this._catalog = c;
  this.createThumbnails();
};


;


/**
 * @private
 */
productsView.ProductCatalogPanel.prototype.createThumbnails = function() {
  var /** @type {number} */ i;
  if (this.thumbnails != null) {
    for (i = 0; i < this.thumbnails.length; i++) {
      this.thumbContentGroup.removeElement(this.thumbnails[i]);
    }
  }
  var /** @type {number} */ row = 0;
  var /** @type {number} */ col = -1;
  var /** @type {number} */ n = this.catalog.length;
  this.thumbnails = new Array(n);
  this.filterCount = n;
  for (i = 0; i < n; i++) {
    var /** @type {productsView.ProductCatalogThumbnail} */ thumb = new productsView.ProductCatalogThumbnail();
    thumb.x = 0;
    thumb.y = 0;
    this.thumbnails[i] = thumb;
    thumb.product = org.apache.flex.utils.Language.as(this.catalog.getItemAt(i), samples.flexstore.Product);
    this.accepted[thumb.product.productId.toString()] = true;
    this.thumbContentGroup.addElement(thumb);
    thumb.addEventListener(samples.flexstore.ProductThumbEvent.PURCHASE, org.apache.flex.utils.Language.closure(this.productThumbEventHandler, this, 'productThumbEventHandler'));
    thumb.addEventListener(samples.flexstore.ProductThumbEvent.COMPARE, org.apache.flex.utils.Language.closure(this.productThumbEventHandler, this, 'productThumbEventHandler'));
    thumb.addEventListener(samples.flexstore.ProductThumbEvent.DETAILS, org.apache.flex.utils.Language.closure(this.productThumbEventHandler, this, 'productThumbEventHandler'));
    thumb.addEventListener(org.apache.flex.events.DragEvent.DRAG_START, org.apache.flex.utils.Language.closure(this.thumbDragStartHandler, this, 'thumbDragStartHandler'));
  }
  var /** @type {org.apache.flex.effects.Effect} */ lastMove = this.layoutCatalog();
  if (lastMove) {
    lastMove.addEventListener(org.apache.flex.effects.Tween.TWEEN_UPDATE, org.apache.flex.utils.Language.closure(this.updateLayout, this, 'updateLayout'));
    lastMove.addEventListener(org.apache.flex.effects.Tween.TWEEN_END, org.apache.flex.utils.Language.closure(this.updateLayout, this, 'updateLayout'));
  }
};


/**
 * @private
 * @param {org.apache.flex.events.Event} event
 */
productsView.ProductCatalogPanel.prototype.updateLayout = function(event) {
  this.thumbContentGroup.dispatchEvent(new org.apache.flex.events.Event("layoutNeeded"));
};


/**
 * @private
 * @param {org.apache.flex.events.MouseEvent} event
 */
productsView.ProductCatalogPanel.prototype.thumbDragStartHandler = function(event) {
  if (org.apache.flex.html.beads.controllers.DragMouseController.dragging == false) {
    var /** @type {productsView.ProductCatalogThumbnail} */ thumb = org.apache.flex.utils.Language.as(event.target, productsView.ProductCatalogThumbnail);
    org.apache.flex.events.DragEvent.dragSource = thumb.product;
    var /** @type {productsView.ProductCatalogThumbnail} */ di = new productsView.ProductCatalogThumbnail();
    di.product = thumb.product;
    di.currentState = thumb.currentState;
    org.apache.flex.html.beads.controllers.DragMouseController.dragImage = di;
    org.apache.flex.events.DragEvent.dragInitiator = this;
  }
};


/**
 * @export
 * @param {samples.flexstore.ProductFilter} productFilter
 * @param {boolean} live
 */
productsView.ProductCatalogPanel.prototype.filter = function(productFilter, live) {
  var self = this;
  this.currentState = "browse";
  this.thumbnailState = "browse";
  var /** @type {number} */ count = 0;
  var /** @type {number} */ n = this.thumbnails.length;
  var /** @type {Array} */ targets = [];
  for (var /** @type {number} */ i = 0; i < n; i++) {
    var /** @type {productsView.ProductCatalogThumbnail} */ thumb = this.thumbnails[i];
    var /** @type {samples.flexstore.Product} */ product = thumb.product;
    if (productFilter.accept(product)) {
      this.accepted[product.productId.toString()] = true;
      thumb.alpha = 1;
      count++;
    } else {
      this.accepted[product.productId.toString()] = false;
      if (live) {
        thumb.alpha = .1;
      } else if (thumb.alpha == 1) {
        targets.push(thumb);
      }
    }
  }
  productFilter.count = count;
  this.filterCount = count;
  if (targets.length > 0) {
    var /** @type {org.apache.flex.effects.Parallel} */ p = new org.apache.flex.effects.Parallel();
    n = targets.length;
    for (i = 0; i < n; i++) {
      var /** @type {org.apache.flex.effects.Fade} */ fadeOut = new org.apache.flex.effects.Fade(org.apache.flex.utils.Language.as(targets[i], org.apache.flex.core.IUIBase));
      fadeOut.alphaFrom = 1;
      fadeOut.alphaTo = .1;
      p.addChild(fadeOut);
    }
    p.play();
    p.addEventListener(org.apache.flex.effects.Effect.EFFECT_END, function(event) {
      self.layoutCatalog();
    });
  } else if (!live) {
    this.layoutCatalog();
  }
};


/**
 * @private
 * @return {org.apache.flex.effects.Effect}
 */
productsView.ProductCatalogPanel.prototype.layoutCatalog = function() {
  var self = this;
  var /** @type {number} */ tileWidth;
  var /** @type {number} */ tileHeight;
  var /** @type {number} */ numCols;
  if (this.filterCount > 9 || this.currentState == "compare") {
    numCols = 4;
    tileWidth = productsView.ProductCatalogThumbnail.COL_WIDTH_4;
    tileWidth = this.currentState == "compare" ? productsView.ProductCatalogThumbnail.COMPARE_WIDTH : productsView.ProductCatalogThumbnail.COL_WIDTH_4;
    tileHeight = this.currentState == "compare" ? this.height - 4 : productsView.ProductCatalogThumbnail.COL_HEIGHT_4;
  } else if (this.filterCount > 4) {
    numCols = 3;
    tileWidth = productsView.ProductCatalogThumbnail.COL_WIDTH_3;
    tileHeight = productsView.ProductCatalogThumbnail.COL_HEIGHT_3;
  } else if (this.filterCount <= 9) {
    numCols = 2;
    tileWidth = productsView.ProductCatalogThumbnail.COL_WIDTH_2;
    tileHeight = productsView.ProductCatalogThumbnail.COL_HEIGHT_2;
  } else {
  }
  var /** @type {number} */ row = 0;
  var /** @type {number} */ col = -1;
  var /** @type {org.apache.flex.effects.Move} */ move = null;
  var /** @type {number} */ n = this.catalog.length;
  for (var /** @type {number} */ i = 0; i < n; i++) {
    var /** @type {samples.flexstore.Product} */ product = org.apache.flex.utils.Language.as(this.catalog.getItemAt(i), samples.flexstore.Product);
    var /** @type {productsView.ProductCatalogThumbnail} */ thumb = this.thumbnails[i];
    if (this.accepted[product.productId.toString()]) {
      thumb.currentState = "x" + numCols + "cols";
      col++;
      if (col > numCols - 1) {
        row++;
        col = 0;
      }
      var /** @type {number} */ xTo = col * (tileWidth + productsView.ProductCatalogThumbnail.HORIZONTAL_GAP);
      var /** @type {number} */ yTo = row * (tileHeight + productsView.ProductCatalogThumbnail.VERTICAL_GAP);
      if (thumb.visible) {
        if (thumb.x != xTo || thumb.y != yTo) {
          move = new org.apache.flex.effects.Move(thumb);
          move.xTo = xTo;
          move.yTo = yTo;
          move.play();
        }
      } else {
        thumb.x = xTo;
        thumb.y = yTo;
      }
    } else {
      thumb.visible = false;
    }
  }
  if (!move) {
    this.fadeInThumbnails();
  } else {
    this.scv.verticalScrollPosition = 0;
    move.addEventListener(org.apache.flex.effects.Effect.EFFECT_END, function(event) {
      self.fadeInThumbnails();
    });
  }
  this.thumbContentGroup.dispatchEvent(new org.apache.flex.events.Event("layoutNeeded"));
  return move;
};


/**
 * @private
 */
productsView.ProductCatalogPanel.prototype.fadeInThumbnails = function() {
  var /** @type {number} */ n = this.thumbnails.length;
  var /** @type {Array} */ targets = [];
  for (var /** @type {number} */ i = 0; i < n; i++) {
    var /** @type {productsView.ProductCatalogThumbnail} */ thumb = this.thumbnails[i];
    if (this.accepted[thumb.product.productId.toString()] && !thumb.visible) {
      thumb.alpha = 0;
      thumb.visible = true;
      targets.push(thumb);
    }
  }
  if (targets.length > 0) {
    n = targets.length;
    for (i = 0; i < n; i++) {
      var /** @type {org.apache.flex.effects.Fade} */ effect = new org.apache.flex.effects.Fade(org.apache.flex.utils.Language.as(targets[i], org.apache.flex.core.IUIBase));
      effect.alphaTo = 1;
      effect.play();
    }
  }
};


/**
 * @private
 * @param {samples.flexstore.Product} product
 */
productsView.ProductCatalogPanel.prototype.showDetails = function(product) {
  var self = this;
  if (this.currentState == "details") {
    this.details.product = product;
    return;
  }
  var /** @type {number} */ row = -1;
  var /** @type {number} */ xTo = this.thumbContentGroup.width - productsView.ProductCatalogThumbnail.COL_WIDTH_4 - 20;
  var /** @type {number} */ yTo;
  var /** @type {org.apache.flex.effects.Move} */ move;
  var /** @type {boolean} */ first = true;
  var /** @type {productsView.ProductCatalogThumbnail} */ selectedThumb;
  var /** @type {number} */ n = this.thumbnails.length;
  for (var /** @type {number} */ i = 0; i < n; i++) {
    var /** @type {productsView.ProductCatalogThumbnail} */ thumb = this.thumbnails[i];
    if (thumb.visible) {
      row++;
      yTo = row * (productsView.ProductCatalogThumbnail.COL_HEIGHT_4 + productsView.ProductCatalogThumbnail.VERTICAL_GAP);
      thumb.currentState = "x4cols";
      if (thumb.x != xTo || thumb.y != yTo) {
        move = new org.apache.flex.effects.Move(thumb);
        if (first) {
          move.addEventListener(org.apache.flex.effects.Effect.EFFECT_END, function(event) {
            self.details.product = product;
            self.currentState = "details";
          });
          first = false;
        }
        move.xTo = xTo;
        move.yTo = yTo;
        move.play();
      }
      if (thumb.product == product) {
        selectedThumb = thumb;
      }
    }
  }
  if (selectedThumb != null) {
    move.addEventListener(org.apache.flex.effects.Effect.EFFECT_END, function(e) {
      var /** @type {number} */ curpos = self.scv.verticalScrollPosition;
      if (selectedThumb.y < curpos) {
        self.scv.verticalScrollPosition = self.y;
      } else if (selectedThumb.y + productsView.ProductCatalogThumbnail.COL_HEIGHT_4 > curpos + self.thumbContentGroup.height) {
        var /** @type {number} */ diff = selectedThumb.y - (curpos + self.thumbContentGroup.height);
        self.scv.verticalScrollPosition += diff + productsView.ProductCatalogThumbnail.COL_HEIGHT_4 + productsView.ProductCatalogThumbnail.VERTICAL_GAP;
      }
    });
  }
};


/**
 * @private
 * @param {samples.flexstore.ProductThumbEvent} event
 */
productsView.ProductCatalogPanel.prototype.productThumbEventHandler = function(event) {
  if (event.type == samples.flexstore.ProductThumbEvent.DETAILS) {
    this.showDetails(event.product);
  } else if (event.type == samples.flexstore.ProductThumbEvent.BROWSE) {
    if (this.thumbnailState == "browse") {
      this.currentState = "browse";
      this.layoutCatalog();
    } else {
      this.compare();
    }
  } else {
    this.dispatchEvent(event);
  }
};


/**
 * @export
 * @param {Array=} toCompare
 */
productsView.ProductCatalogPanel.prototype.compare = function(toCompare) {
  var self = this;
  toCompare = typeof toCompare !== 'undefined' ? toCompare : null;
  this.currentState = "compare";
  this.thumbnailState = "compare";
  if (toCompare != null) {
    var /** @type {number} */ n = this.thumbnails.length;
    for (var /** @type {number} */ i = 0; i < n; i++) {
      this.accepted[this.thumbnails[i].product.productId.toString()] = false;
    }
    for (i = 0; i < toCompare.length; i++) {
      this.accepted[toCompare[i].productId.toString()] = true;
    }
  }
  var /** @type {org.apache.flex.effects.Effect} */ lastEffect = this.layoutCatalog();
  if (lastEffect != null) {
    lastEffect.addEventListener(org.apache.flex.effects.Effect.EFFECT_END, function(event) {
      self.setCompareState();
    });
  } else {
    this.setCompareState();
  }
};


/**
 * @private
 */
productsView.ProductCatalogPanel.prototype.setCompareState = function() {
  if (this.currentState == "compare") {
    var /** @type {number} */ n = this.thumbnails.length;
    for (var /** @type {number} */ i = 0; i < n; i++) {
      var /** @type {productsView.ProductCatalogThumbnail} */ thumb = this.thumbnails[i];
      if (this.accepted[thumb.product.productId.toString()]) {
        thumb.currentState = "compare";
      }
    }
  }
};


/**
 * @export
 * @param {Object} dropTarget
 * @param {string} type
 */
productsView.ProductCatalogPanel.prototype.acceptingDrop = function(dropTarget, type) {
};


/**
 * @export
 * @param {Object} dropTarget
 * @param {string} type
 */
productsView.ProductCatalogPanel.prototype.acceptedDrop = function(dropTarget, type) {
};


Object.defineProperties(productsView.ProductCatalogPanel.prototype, /** @lends {productsView.ProductCatalogPanel.prototype} */ {
/** @export */
cartCount: {
/** @this {productsView.ProductCatalogPanel} */
  get: function() {
  return this.cartCount_;
  },

/** @this {productsView.ProductCatalogPanel} */
set: function(value) {
if (value != this.cartCount_) {
    var oldValue = this.cartCount_;
    this.cartCount_ = value;
    this.dispatchEvent(org.apache.flex.events.ValueChangeEvent.createUpdateEvent(
         this, "cartCount", oldValue, value));
}
}}}
);


Object.defineProperties(productsView.ProductCatalogPanel.prototype, /** @lends {productsView.ProductCatalogPanel.prototype} */ {
/** @export */
catalog: {
get: /** @this {productsView.ProductCatalogPanel} */ function() {
  return this._catalog;
},
set: /** @this {productsView.ProductCatalogPanel} */ function(c) {
var oldValue = this.catalog;
if (oldValue === c) return;
this.__bindingWrappedSetter__catalog(c);
    this.dispatchEvent(org.apache.flex.events.ValueChangeEvent.createUpdateEvent(
         this, "catalog", oldValue, c));
}

}}
);/**
 * @export
 * @param {samples.flexstore.ProductThumbEvent} event
 */
productsView.ProductCatalogPanel.prototype.$EH0 = function(event)
{
  this.productThumbEventHandler(event);
};


/**
 * @export
 * @param {samples.flexstore.ProductThumbEvent} event
 */
productsView.ProductCatalogPanel.prototype.$EH1 = function(event)
{
  this.productThumbEventHandler(event);
};


/**
 * @export
 * @param {samples.flexstore.ProductThumbEvent} event
 */
productsView.ProductCatalogPanel.prototype.$EH2 = function(event)
{
  this.productThumbEventHandler(event);
};


Object.defineProperties(productsView.ProductCatalogPanel.prototype, /** @lends {productsView.ProductCatalogPanel.prototype} */ {
/** @export */
    dragger: {
    /** @this {productsView.ProductCatalogPanel} */
    get: function() {
      return this.dragger_;
    },
    /** @this {productsView.ProductCatalogPanel} */
    set: function(value) {
      if (value != this.dragger_) {
        this.dragger_ = value;
        this.dispatchEvent(org.apache.flex.events.ValueChangeEvent.createUpdateEvent(this, 'dragger', null, value));
      }
    }
  },
  /** @export */
    pdb: {
    /** @this {productsView.ProductCatalogPanel} */
    get: function() {
      return this.pdb_;
    },
    /** @this {productsView.ProductCatalogPanel} */
    set: function(value) {
      if (value != this.pdb_) {
        this.pdb_ = value;
        this.dispatchEvent(org.apache.flex.events.ValueChangeEvent.createUpdateEvent(this, 'pdb', null, value));
      }
    }
  },
  /** @export */
    thumbContentGroup: {
    /** @this {productsView.ProductCatalogPanel} */
    get: function() {
      return this.thumbContentGroup_;
    },
    /** @this {productsView.ProductCatalogPanel} */
    set: function(value) {
      if (value != this.thumbContentGroup_) {
        this.thumbContentGroup_ = value;
        this.dispatchEvent(org.apache.flex.events.ValueChangeEvent.createUpdateEvent(this, 'thumbContentGroup', null, value));
      }
    }
  },
  /** @export */
    scv: {
    /** @this {productsView.ProductCatalogPanel} */
    get: function() {
      return this.scv_;
    },
    /** @this {productsView.ProductCatalogPanel} */
    set: function(value) {
      if (value != this.scv_) {
        this.scv_ = value;
        this.dispatchEvent(org.apache.flex.events.ValueChangeEvent.createUpdateEvent(this, 'scv', null, value));
      }
    }
  },
  /** @export */
    details: {
    /** @this {productsView.ProductCatalogPanel} */
    get: function() {
      return this.details_;
    },
    /** @this {productsView.ProductCatalogPanel} */
    set: function(value) {
      if (value != this.details_) {
        this.details_ = value;
        this.dispatchEvent(org.apache.flex.events.ValueChangeEvent.createUpdateEvent(this, 'details', null, value));
      }
    }
  },
  'MXMLDescriptor': {
    /** @this {productsView.ProductCatalogPanel} */
    get: function() {
      {
        if (this.mxmldd == undefined)
        {
          /** @type {Array} */
          var arr = org.apache.flex.utils.Language.superGetter(productsView.ProductCatalogPanel,this, 'MXMLDescriptor');
          /** @type {Array} */
          var data = [
      org.apache.flex.html.Container,
3,
'_id',
true,
'$ID6',
'percentWidth',
true,
100.0,
'percentHeight',
true,
100.0,
0,
0,
[org.apache.flex.html.Container, 4, 'id', true, 'thumbContentGroup', 'percentWidth', true, 100.0, 'percentHeight', true, 100.0, 'beads', null, [org.apache.flex.html.supportClasses.ScrollingViewport, 1, 'id', true, 'scv', 0, 0, null], 0, 0, null, productsView.ProductDetails, 4, 'id', true, 'details', 'y', true, 0, 'percentHeight', true, 100.0, 'visible', true, false, 0, 3, 'compare', this.$EH0, 'purchase', this.$EH1, 'browse', this.$EH2, null]
      ];
        
          if (arr)
            this.mxmldd = arr.concat(data);
          else
            this.mxmldd = data;
        }
        return this.mxmldd;
      }
      }
    }
  });
  /**
   * @export
   */
  productsView.ProductCatalogPanel.prototype._bindings = [
  1,
  function() { return productsView.ProductCatalogThumbnail.COL_WIDTH_4 * 3; },
  null,
  ["details", "width"],
  null];
  
