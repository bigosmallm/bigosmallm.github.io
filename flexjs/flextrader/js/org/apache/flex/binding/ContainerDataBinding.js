/**
 * Generated by Apache Flex Cross-Compiler from org/apache/flex/binding/ContainerDataBinding.as
 * org.apache.flex.binding.ContainerDataBinding
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes}
 */

goog.provide('org.apache.flex.binding.ContainerDataBinding');

goog.require('org.apache.flex.core.DataBindingBase');
goog.require('org.apache.flex.binding.ChainBinding');
goog.require('org.apache.flex.core.IBead');



/**
 *  Constructor.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion FlexJS 0.0
 * @constructor
 * @extends {org.apache.flex.core.DataBindingBase}
 * @implements {org.apache.flex.core.IBead}
 */
org.apache.flex.binding.ContainerDataBinding = function() {
  
  this.deferredBindings = {};
  org.apache.flex.binding.ContainerDataBinding.base(this, 'constructor');
};
goog.inherits(org.apache.flex.binding.ContainerDataBinding, org.apache.flex.core.DataBindingBase);


/**
 * @private
 * @type {org.apache.flex.core.IStrand}
 */
org.apache.flex.binding.ContainerDataBinding.prototype._strand;


/**
 * @private
 * @param {org.apache.flex.events.Event} event
 */
org.apache.flex.binding.ContainerDataBinding.prototype.initCompleteHandler = function(event) {
  var /** @type {Object} */ fieldWatcher;
  var /** @type {org.apache.flex.binding.SimpleBinding} */ sb;
  var /** @type {org.apache.flex.binding.ConstantBinding} */ cb;
  if (!("_bindings" in this._strand))
    return;
  var /** @type {Array} */ bindingData = this._strand["_bindings"];
  var /** @type {number} */ n = bindingData[0];
  var /** @type {Array} */ bindings = [];
  var /** @type {number} */ i;
  var /** @type {number} */ index = 1;
  for (i = 0; i < n; i++) {
    var /** @type {Object} */ binding = {};
    binding.source = bindingData[index++];
    binding.destFunc = bindingData[index++];
    binding.destination = bindingData[index++];
    bindings.push(binding);
  }
  var /** @type {Object} */ watchers = this.decodeWatcher(bindingData.slice(index));
  for (i = 0; i < n; i++) {
    binding = bindings[i];
    if (org.apache.flex.utils.Language.is(binding.source, Array)) {
      if (binding.source[0] in this._strand) {
        var /** @type {Object} */ destObject;
        var /** @type {org.apache.flex.core.IStrand} */ destination;
        var /** @type {Object} */ compWatcher;
        if (binding.source.length == 2 && binding.destination.length == 2) {
          compWatcher = watchers.watcherMap[binding.source[0]];
          fieldWatcher = compWatcher.children.watcherMap[binding.source[1]];
          if (org.apache.flex.utils.Language.is(fieldWatcher.eventNames, String)) {
            sb = new org.apache.flex.binding.SimpleBinding();
            sb.destinationPropertyName = binding.destination[1];
            sb.eventName = org.apache.flex.utils.Language.as(fieldWatcher.eventNames, String);
            sb.sourceID = binding.source[0];
            sb.sourcePropertyName = binding.source[1];
            sb.setDocument(this._strand);
            destObject = this._strand[binding.destination[0]];
            destination = org.apache.flex.utils.Language.as(destObject, org.apache.flex.core.IStrand);
            if (destination)
              destination.addBead(sb); else {
              if (destObject) {
                sb.destination = destObject;
                this._strand.addBead(sb);
              } else {
                this.deferredBindings[binding.destination[0]] = sb;
                org.apache.flex.utils.Language.as(this._strand, org.apache.flex.events.IEventDispatcher, true).addEventListener("valueChange", org.apache.flex.utils.Language.closure(this.deferredBindingsHandler, this, 'deferredBindingsHandler'));
              }
            }
          } else if (fieldWatcher.eventNames == null) {
            cb = new org.apache.flex.binding.ConstantBinding();
            cb.destinationPropertyName = binding.destination[1];
            cb.sourceID = binding.source[0];
            cb.sourcePropertyName = binding.source[1];
            cb.setDocument(this._strand);
            destObject = this._strand[binding.destination[0]];
            destination = org.apache.flex.utils.Language.as(destObject, org.apache.flex.core.IStrand);
            if (destination)
              destination.addBead(cb); else {
              if (destObject) {
                cb.destination = destObject;
                this._strand.addBead(cb);
              } else {
                this.deferredBindings[binding.destination[0]] = cb;
                org.apache.flex.utils.Language.as(this._strand, org.apache.flex.events.IEventDispatcher, true).addEventListener("valueChange", org.apache.flex.utils.Language.closure(this.deferredBindingsHandler, this, 'deferredBindingsHandler'));
              }
            }
          }
        } else {
          compWatcher = watchers.watcherMap[binding.source[0]];
          var /** @type {org.apache.flex.binding.ChainBinding} */ chb = new org.apache.flex.binding.ChainBinding();
          chb.destination = binding.destination;
          chb.source = binding.source;
          chb.watcherChain = compWatcher;
          chb.setDocument(this._strand);
          this._strand.addBead(chb);
        }
      }
    } else if (org.apache.flex.utils.Language.is(binding.source, String) && org.apache.flex.utils.Language.is(binding.destination, Array)) {
      fieldWatcher = watchers.watcherMap[binding.source];
      if (fieldWatcher == null) {
        cb = new org.apache.flex.binding.ConstantBinding();
        cb.destinationPropertyName = binding.destination[1];
        cb.sourcePropertyName = binding.source;
        cb.setDocument(this._strand);
        if (binding.destination[0] == "this")
          destObject = this._strand;
        else
          destObject = this._strand[binding.destination[0]];
        destination = org.apache.flex.utils.Language.as(destObject, org.apache.flex.core.IStrand);
        if (destination)
          destination.addBead(cb); else {
          if (destObject) {
            cb.destination = destObject;
            this._strand.addBead(cb);
          } else {
            this.deferredBindings[binding.destination[0]] = cb;
            org.apache.flex.utils.Language.as(this._strand, org.apache.flex.events.IEventDispatcher, true).addEventListener("valueChange", org.apache.flex.utils.Language.closure(this.deferredBindingsHandler, this, 'deferredBindingsHandler'));
          }
        }
      } else if (org.apache.flex.utils.Language.is(fieldWatcher.eventNames, String)) {
        sb = new org.apache.flex.binding.SimpleBinding();
        sb.destinationPropertyName = binding.destination[1];
        sb.eventName = org.apache.flex.utils.Language.as(fieldWatcher.eventNames, String);
        sb.sourcePropertyName = binding.source;
        sb.setDocument(this._strand);
        destObject = this._strand[binding.destination[0]];
        destination = org.apache.flex.utils.Language.as(destObject, org.apache.flex.core.IStrand);
        if (destination)
          destination.addBead(sb); else {
          if (destObject) {
            sb.destination = destObject;
            this._strand.addBead(sb);
          } else {
            this.deferredBindings[binding.destination[0]] = sb;
            org.apache.flex.utils.Language.as(this._strand, org.apache.flex.events.IEventDispatcher, true).addEventListener("valueChange", org.apache.flex.utils.Language.closure(this.deferredBindingsHandler, this, 'deferredBindingsHandler'));
          }
        }
      }
    } else {
      this.makeGenericBinding(binding, i, watchers);
    }
  }
};


/**
 * @private
 * @param {Object} binding
 * @param {number} index
 * @param {Object} watchers
 */
org.apache.flex.binding.ContainerDataBinding.prototype.makeGenericBinding = function(binding, index, watchers) {
  var /** @type {org.apache.flex.binding.GenericBinding} */ gb = new org.apache.flex.binding.GenericBinding();
  gb.setDocument(this._strand);
  gb.destinationData = binding.destination;
  gb.destinationFunction = binding.destFunc;
  gb.source = binding.source;
  if (watchers.watchers.length)
    this.setupWatchers(gb, index, watchers.watchers, null); else {
    gb.valueChanged(null);
  }
};


/**
 * @private
 * @param {org.apache.flex.binding.GenericBinding} gb
 * @param {number} index
 * @param {Array} watchers
 * @param {org.apache.flex.binding.WatcherBase} parentWatcher
 */
org.apache.flex.binding.ContainerDataBinding.prototype.setupWatchers = function(gb, index, watchers, parentWatcher) {
  var /** @type {number} */ n = watchers.length;
  for (var /** @type {number} */ i = 0; i < n; i++) {
    var /** @type {Object} */ watcher = watchers[i];
    var /** @type {boolean} */ isValidWatcher = false;
    if (typeof((watcher.bindings)) == "number")
      isValidWatcher = (watcher.bindings == index);
    else
      isValidWatcher = (watcher.bindings.indexOf(index) != -1);
    if (isValidWatcher) {
      var /** @type {string} */ type = watcher.type;
      switch (type) {
        case "property":
          var /** @type {org.apache.flex.binding.PropertyWatcher} */ pw = new org.apache.flex.binding.PropertyWatcher(this, watcher.propertyName, watcher.eventNames, watcher.getterFunction);
          watcher.watcher = pw;
          if (parentWatcher)
            pw.parentChanged(parentWatcher.value);
          else
            pw.parentChanged(this._strand);
          if (parentWatcher)
            parentWatcher.addChild(pw);
          if (watcher.children == null)
            pw.addBinding(gb);
          break;
      }
      if (watcher.children) {
        this.setupWatchers(gb, index, watcher.children.watchers, watcher.watcher);
      }
    }
  }
};


/**
 * @private
 * @param {Array} bindingData
 * @return {Object}
 */
org.apache.flex.binding.ContainerDataBinding.prototype.decodeWatcher = function(bindingData) {
  var /** @type {Object} */ watcherMap = {};
  var /** @type {Array} */ watchers = [];
  var /** @type {number} */ n = bindingData.length;
  var /** @type {number} */ index = 0;
  var /** @type {Object} */ watcherData;
  while (index < n - 2) {
    var /** @type {number} */ watcherIndex = bindingData[index++];
    var /** @type {number} */ type = bindingData[index++];
    switch (type) {
      case 0:
        watcherData = {type:"function"};
        watcherData.functionName = bindingData[index++];
        watcherData.paramFunction = bindingData[index++];
        watcherData.eventNames = bindingData[index++];
        watcherData.bindings = bindingData[index++];
        break;
      case 1:
        watcherData = {type:"static"};
        watcherData.propertyName = bindingData[index++];
        watcherData.eventNames = bindingData[index++];
        watcherData.bindings = bindingData[index++];
        watcherData.getterFunction = bindingData[index++];
        watcherData.parentObj = bindingData[index++];
        watcherMap[watcherData.propertyName] = watcherData;
        break;
      case 2:
        watcherData = {type:"property"};
        watcherData.propertyName = bindingData[index++];
        watcherData.eventNames = bindingData[index++];
        watcherData.bindings = bindingData[index++];
        watcherData.getterFunction = bindingData[index++];
        watcherMap[watcherData.propertyName] = watcherData;
        break;
      case 3:
        watcherData = {type:"xml"};
        watcherData.propertyName = bindingData[index++];
        watcherData.bindings = bindingData[index++];
        watcherMap[watcherData.propertyName] = watcherData;
        break;
    }
    watcherData.children = bindingData[index++];
    if (watcherData.children != null) {
      watcherData.children = this.decodeWatcher(watcherData.children);
    }
    watcherData.index = watcherIndex;
    watchers.push(watcherData);
  }
  return {watchers:watchers, watcherMap:watcherMap};
};


/**
 * @private
 * @type {Object}
 */
org.apache.flex.binding.ContainerDataBinding.prototype.deferredBindings;


/**
 * @private
 * @param {org.apache.flex.events.Event} event
 */
org.apache.flex.binding.ContainerDataBinding.prototype.deferredBindingsHandler = function(event) {
  for (var /** @type {string} */ p in this.deferredBindings) {
    if (this._strand[p] != null) {
      var /** @type {org.apache.flex.core.IStrand} */ destination = org.apache.flex.utils.Language.as(this._strand[p], org.apache.flex.core.IStrand);
      destination.addBead(this.deferredBindings[p]);
      delete this.deferredBindings[p];
    }
  }
};


Object.defineProperties(org.apache.flex.binding.ContainerDataBinding.prototype, /** @lends {org.apache.flex.binding.ContainerDataBinding.prototype} */ {
/** @export */
strand: {
set: /** @this {org.apache.flex.binding.ContainerDataBinding} */ function(value) {
  this._strand = value;
  org.apache.flex.utils.Language.as(this._strand, org.apache.flex.events.IEventDispatcher, true).addEventListener("initBindings", org.apache.flex.utils.Language.closure(this.initCompleteHandler, this, 'initCompleteHandler'));
}}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.flex.binding.ContainerDataBinding.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'ContainerDataBinding', qName: 'org.apache.flex.binding.ContainerDataBinding'}], interfaces: [org.apache.flex.core.IBead] };
