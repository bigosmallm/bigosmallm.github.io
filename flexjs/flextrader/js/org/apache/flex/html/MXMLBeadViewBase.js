/**
 * Generated by Apache Flex Cross-Compiler from org/apache/flex/html/MXMLBeadViewBase.as
 * org.apache.flex.html.MXMLBeadViewBase
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes}
 */

goog.provide('org.apache.flex.html.MXMLBeadViewBase');

goog.require('org.apache.flex.html.beads.ContainerView');
goog.require('org.apache.flex.core.ILayoutParent');
goog.require('org.apache.flex.core.IStrand');



/**
 *  Constructor.
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion FlexJS 0.0
 * @constructor
 * @extends {org.apache.flex.html.beads.ContainerView}
 * @implements {org.apache.flex.core.IStrand}
 * @implements {org.apache.flex.core.ILayoutParent}
 */
org.apache.flex.html.MXMLBeadViewBase = function() {
  org.apache.flex.html.MXMLBeadViewBase.base(this, 'constructor');
};
goog.inherits(org.apache.flex.html.MXMLBeadViewBase, org.apache.flex.html.beads.ContainerView);


/**
 *  @copy org.apache.flex.core.Application#generateMXMLAttributes()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion FlexJS 0.0
 * @export
 * @param {Array} data
 */
org.apache.flex.html.MXMLBeadViewBase.prototype.generateMXMLAttributes = function(data) {
  org.apache.flex.utils.MXMLDataInterpreter.generateMXMLProperties(this, data);
};


/**
 * @export
 * @type {Array}
 */
org.apache.flex.html.MXMLBeadViewBase.prototype.mxmlContent;


/**
 * @private
 * @type {Array}
 */
org.apache.flex.html.MXMLBeadViewBase.prototype._states;


/**
 *  <code>true</code> if the array of states
 *  contains a state with this name.
 * 
 *  @asparam state The state namem.
 *  @asreturn True if state in state array
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion FlexJS 0.0
 * @export
 * @param {string} state
 * @return {boolean}
 */
org.apache.flex.html.MXMLBeadViewBase.prototype.hasState = function(state) {
  for (var foreachiter0 in this._states) 
  {
  var s = this._states[foreachiter0];
  {
    if (s.name == state)
      return true;
  }}
  
  return false;
};


/**
 * @private
 * @type {string}
 */
org.apache.flex.html.MXMLBeadViewBase.prototype._currentState;


/**
 * @private
 * @type {Array}
 */
org.apache.flex.html.MXMLBeadViewBase.prototype._transitions;


/**
 * @export
 * @type {Array}
 */
org.apache.flex.html.MXMLBeadViewBase.prototype.beads;


/**
 * @private
 * @type {Array}
 */
org.apache.flex.html.MXMLBeadViewBase.prototype._beads;


/**
 *  @copy org.apache.flex.core.IStrand#addBead()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion FlexJS 0.0
 * @export
 * @param {org.apache.flex.core.IBead} bead
 */
org.apache.flex.html.MXMLBeadViewBase.prototype.addBead = function(bead) {
  if (!this._beads)
    this._beads = [];
  this._beads.push(bead);
  bead.strand = this;
};


/**
 *  @copy org.apache.flex.core.IStrand#getBeadByType()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion FlexJS 0.0
 * @export
 * @param {Object} classOrInterface
 * @return {org.apache.flex.core.IBead}
 */
org.apache.flex.html.MXMLBeadViewBase.prototype.getBeadByType = function(classOrInterface) {
  for (var foreachiter1 in this._beads) 
  {
  var bead = this._beads[foreachiter1];
  {
    if (org.apache.flex.utils.Language.is(bead, classOrInterface))
      return bead;
  }}
  
  return null;
};


/**
 *  @copy org.apache.flex.core.IStrand#removeBead()
 *  
 *  @langversion 3.0
 *  @playerversion Flash 10.2
 *  @playerversion AIR 2.6
 *  @productversion FlexJS 0.0
 * @export
 * @param {org.apache.flex.core.IBead} value
 * @return {org.apache.flex.core.IBead}
 */
org.apache.flex.html.MXMLBeadViewBase.prototype.removeBead = function(value) {
  var /** @type {number} */ n = this._beads.length;
  for (var /** @type {number} */ i = 0; i < n; i++) {
    var /** @type {org.apache.flex.core.IBead} */ bead = this._beads[i];
    if (bead == value) {
      this._beads.splice(i, 1);
      return bead;
    }
  }
  return null;
};


Object.defineProperties(org.apache.flex.html.MXMLBeadViewBase.prototype, /** @lends {org.apache.flex.html.MXMLBeadViewBase.prototype} */ {
/** @export */
MXMLDescriptor: {
get: /** @this {org.apache.flex.html.MXMLBeadViewBase} */ function() {
  return null;
}},
/** @export */
model: {
get: /** @this {org.apache.flex.html.MXMLBeadViewBase} */ function() {
  return this._strand["model"];
}},
/** @export */
transitions: {
get: /** @this {org.apache.flex.html.MXMLBeadViewBase} */ function() {
  return this._transitions;
},
set: /** @this {org.apache.flex.html.MXMLBeadViewBase} */ function(value) {
  this._transitions = value;
}},
/** @export */
currentState: {
get: /** @this {org.apache.flex.html.MXMLBeadViewBase} */ function() {
  return this._currentState;
},
set: /** @this {org.apache.flex.html.MXMLBeadViewBase} */ function(value) {
  var /** @type {org.apache.flex.events.ValueChangeEvent} */ event = new org.apache.flex.events.ValueChangeEvent("currentStateChange", false, false, this._currentState, value);
  this._currentState = value;
  this.dispatchEvent(event);
}},
/** @export */
strand: {
set: /** @this {org.apache.flex.html.MXMLBeadViewBase} */ function(value) {
  org.apache.flex.utils.Language.superSetter(org.apache.flex.html.MXMLBeadViewBase, this, 'strand', value);
  org.apache.flex.core.ValuesManager.valuesImpl.init(this);
  this.dispatchEvent(new org.apache.flex.events.Event("strandChanged"));
  for (var foreachiter2 in this.beads) 
  {
  var bead = this.beads[foreachiter2];
  
    this.addBead(bead);}
  
  this.dispatchEvent(new org.apache.flex.events.Event("beadsAdded"));
  org.apache.flex.utils.MXMLDataInterpreter.generateMXMLInstances(this, org.apache.flex.utils.Language.as(value, org.apache.flex.core.IParent, true), this.MXMLDescriptor);
  this.dispatchEvent(new org.apache.flex.events.Event("initBindings"));
  this.dispatchEvent(new org.apache.flex.events.Event("initComplete"));
  this.dispatchEvent(new org.apache.flex.events.Event("childrenAdded"));
}},
/** @export */
states: {
get: /** @this {org.apache.flex.html.MXMLBeadViewBase} */ function() {
  return this._states;
},
set: /** @this {org.apache.flex.html.MXMLBeadViewBase} */ function(value) {
  this._states = value;
  this._currentState = this._states[0].name;
  try {
    if (this.getBeadByType(org.apache.flex.core.IStatesImpl) == null)
      this.addBead(org.apache.flex.utils.Language.as(new org.apache.flex.core.ValuesManager.valuesImpl.getValue(this, "iStatesImpl")(), org.apache.flex.core.IBead));
  } catch (e) {
    org.apache.flex.utils.Language.trace(e.message);
  }
}}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
org.apache.flex.html.MXMLBeadViewBase.prototype.FLEXJS_CLASS_INFO = { names: [{ name: 'MXMLBeadViewBase', qName: 'org.apache.flex.html.MXMLBeadViewBase'}], interfaces: [org.apache.flex.core.IStrand, org.apache.flex.core.ILayoutParent] };
